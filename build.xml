<project name="master" basedir="." default="">
	<property name="release.output.dir" value="dist"/>
	<property name="output.dir" value="classes" />

	<macrodef name="iterate">
		<attribute name="target" />
		<element name="properties" optional="true"/>
		<sequential>
			<subant target="@{target}" verbose="yes">
				<fileset dir="." includes="*/build.xml" />
				<properties/>
			</subant>
		</sequential>
	</macrodef>

	<target name="jar" description="Create module jar files">
		<iterate target="jar"/>
	</target>

	<target name="clean" description="Clean files">
		<iterate target="clean"/>
	</target>

	<target name="test" description="Run tests">
		<iterate target="test"/>
	</target>

	<target name="javadoc" description="Generate Javadocs">
		<iterate target="javadoc"/>
	</target>

	<path id="core.lib.classpath">
		<fileset id="core.lib.fileset" dir="${core.lib.dir}">
			<include name="*.jar"/>
		</fileset>
	</path>

	<path id="optional.lib.classpath">
		<fileset dir="${optional.lib.dir}">
			<include name="**/*.jar" />
		</fileset>
	</path>

	<path id="test.lib.classpath">
		<fileset dir="${test.lib.dir}">
			<include name="**/*.jar" />
		</fileset>
	</path>

	<path id="compile.classpath">
		<pathelement location="${product.classes.dir}" />
		<pathelement location="${test.classes.dir}" />
		<path refid="core.lib.classpath" />
		<path refid="test.lib.classpath" />
		<path refid="optional.lib.classpath" />
	</path>

	<path id="test.classpath">
		<pathelement location="${jar.output.dir}/${quickfixj.jar}" />
		<pathelement location="${test.classes.dir}" />
		<path refid="core.lib.classpath" />
		<path refid="test.lib.classpath" />
		<path refid="optional.lib.classpath" />
	</path>

	<macrodef name="initdir">
		<attribute name="dir" />
		<sequential>
			<delete dir="@{dir}" failonerror="no" />
			<mkdir dir="@{dir}" />
		</sequential>
	</macrodef>

	<macrodef name="convertUnixLineEndings">
		<element name="files" implicit="true"/>
		<sequential>
			<replaceregexp flags="smg" match="\r$" replace="" byline="false">
				<files/>
			</replaceregexp>
		</sequential>
	</macrodef>

	<macrodef name="convertUnixScripts">
		<attribute name="dir" />
		<sequential>
			<convertUnixLineEndings>
				<fileset dir="@{dir}" includes="**/*.sh" />
			</convertUnixLineEndings>
		</sequential>
	</macrodef>

	<!-- Create release archives -->
	<target name="release.timestamped"
	        description="release files with timestamp for version"
	        depends="create.timestamp.version,release.shared" />

	<target name="create.timestamp.version">
		<tstamp>
			<format property="timestamp" pattern="yyyyMMddHHmmss" />
		</tstamp>
		<property name="release.prefix" value="quickfixj-${timestamp}" />
	</target>

	<target name="release.versioned"
	        description="release files with explicit version"
	        depends="query.version,release.shared" />

	<target name="query.version" unless="release.prefix">
		<input message="Enter version number" addproperty="version" />
		<property name="release.prefix" value="quickfixj-${version}" />
	</target>

	<target name="define.src.staging.dir" unless="release.src.staging.dir">
		<property name="release.src.staging.dir"
		          value="${basedir}/${release.output.dir}/staging/source/quickfixj" />
	</target>
	
	<target name="define.bin.staging.dir" unless="release.bin.staging.dir">
		<property name="release.bin.staging.dir"
		          value="${basedir}/${release.output.dir}/staging/bin/quickfixj" />
	</target>

	<target name="define.bin_src.staging.dir" unless="release.bin_src.staging.dir">
		<property name="release.bin_src.staging.dir"
		          value="${basedir}/${release.output.dir}/staging/bin_src" />
	</target>

	<target name="release.shared" depends="jar,test,javadoc">
		<initdir dir="${release.output.dir}" />

		<antcall target="release.source"/>
		<antcall target="release.binaries"/>
		
		<antcall target="test_zip_bin_release"/>
		<antcall target="test_tar_bin_release"/>
		<antcall target="test_tar_src_release"/>
		<antcall target="test_zip_src_release"/>
	</target>

	<target name="release.binaries" depends="define.bin.staging.dir,define.bin_src.staging.dir">
		<copy todir="${release.bin.staging.dir}">
			<fileset dir="." includes="LICENSE"/>
			<fileset dir="." includes="NEWS"/>
		</copy>
			
		<mkdir dir="${release.bin.staging.dir}" />
		<iterate target="export_binaries">
			<properties>
				<property name="release.bin.staging.dir" value="${release.bin.staging.dir}"/>
			</properties>
		</iterate>

		<mkdir dir="${release.bin_src.staging.dir}" />
		<iterate target="export_binary_src">
			<properties>
				<property name="release.bin_src.staging.dir" value="${release.bin_src.staging.dir}"/>
			</properties>
		</iterate>

		<property name="release.bin_src.zip" value="${release.bin.staging.dir}/src.zip"/>
		<zip destfile="${release.bin_src.zip}"
		     basedir="${release.bin_src.staging.dir}" />

		<convertUnixScripts dir="${release.bin.staging.dir}"/>

		<!-- Create binary releases -->
		<property name="release.bin"
		          value="${release.output.dir}/${release.prefix}-bin" />

		<property name="release.bin.tar" value="${release.bin}.tar" />
		<tar destfile="${release.bin.tar}.gz"
		     longfile="gnu"
		     compression="gzip"
		     basedir="${release.bin.staging.dir}/.." />

		<property name="release.bin.zip" value="${release.bin}.zip" />
		<zip destfile="${release.bin.zip}"
		     basedir="${release.bin.staging.dir}/.." />
	</target>
		
	<target name="release.source" depends="define.src.staging.dir">
		<mkdir dir="${release.src.staging.dir}" />

		<copy todir="${release.src.staging.dir}">
			<fileset dir="." includes="*" excludes=".settings,classes"/>
		</copy>

		<iterate target="export_sources">
			<properties>
				<property name="release.src.staging.dir" value="${release.src.staging.dir}"/>
			</properties>
		</iterate>
		<convertUnixScripts dir="${release.src.staging.dir}"/>

		<!-- Build source archives -->
		<property name="release.src"
		          value="${release.output.dir}/${release.prefix}-src" />

		<property name="release.src.tar" value="${release.src}.tar" />
		<tar destfile="${release.src.tar}.gz"
		     longfile="gnu"
		     compression="gzip"
		     basedir="${release.src.staging.dir}/.." />

		<property name="release.src.zip" value="${release.src}.zip" />
		<zip destfile="${release.src.zip}"
		     basedir="${release.src.staging.dir}/.." />
	</target>
	
	<macrodef name="test_executor">
		<attribute name="dir"/>
		<sequential>
			<java fork="true" outputproperty="executor.output" classname="quickfix.examples.executor.Executor" inputstring="exit\n">
				<classpath>
					<fileset dir="@{dir}">
						<include name="lib/*.jar"/>
						<include name="lib/optional/mx4j-*.jar"/>
						<include name="*.jar"/>
					</fileset>
				</classpath>
			</java>
			<echo message="${executor.output}" />
			<condition property="executor.success">
				<contains string="${executor.output}" substring="Logging out all sessions"/>
			</condition>
			<fail message="Executor failed" unless="executor.success"/>
		</sequential>
	</macrodef>
			
	<macrodef name="test_bin_contents">
		<attribute name="dir"/>
		<sequential>
			<condition property="dirs.exist">
				<and>
					<available file="@{dir}/quickfixj/bin"/>
					<available file="@{dir}/quickfixj/doc/api"/>
					<available file="@{dir}/quickfixj/doc/usermanual"/>
					<available file="@{dir}/quickfixj/etc/FIX40.xml"/>
					<available file="@{dir}/quickfixj/etc/FIX41.xml"/>
					<available file="@{dir}/quickfixj/etc/FIX42.xml"/>
					<available file="@{dir}/quickfixj/etc/FIX43.xml"/>
					<available file="@{dir}/quickfixj/etc/FIX44.xml"/>
					<available file="@{dir}/quickfixj/etc/sql/mssql"/>
					<available file="@{dir}/quickfixj/etc/sql/mysql"/>
					<available file="@{dir}/quickfixj/etc/sql/postgresql"/>
					<available file="@{dir}/quickfixj/lib"/>
					<available file="@{dir}/quickfixj/quickfixj.jar"/>
					<available file="@{dir}/quickfixj/quickfixj-examples.jar"/>
					<available file="@{dir}/quickfixj/LICENSE"/>
					<available file="@{dir}/quickfixj/NEWS"/>
				</and>
			</condition>
			<fail message="Missing files or directories in bin release" unless="dirs.exist"/>
		</sequential>
	</macrodef>
			
		
	<target name="test_zip_bin_release">
		<property name="zip.bin.dir" value="${release.output.dir}/zip-bin"/>
		<unzip src="${release.output.dir}/${release.prefix}-bin.zip" dest="${zip.bin.dir}" />
		<test_executor dir="${zip.bin.dir}/quickfixj"/>
		<test_bin_contents dir="${zip.bin.dir}"/>
	</target>

	<target name="test_zip_src_release">
		<unzip src="${release.output.dir}/${release.prefix}-src.zip" dest="${release.output.dir}/zip-src" />
		<mkdir dir="${release.output.dir}/zip-src/quickfixj/output/ant/testreports" />
		<test_executor dir="${release.output.dir}/zip-bin/quickfixj"/>		
	</target>

	<target name="test_tar_bin_release">
		<property name="tar.bin.dir" value="${release.output.dir}/tar-bin"/>
		<untar compression="gzip" src="${release.output.dir}/${release.prefix}-bin.tar.gz" dest="${tar.bin.dir}" />
		<test_executor dir="${tar.bin.dir}/quickfixj"/>
		<test_bin_contents dir="${tar.bin.dir}"/>
	</target>
	
	<target name="test_tar_src_release">
		<untar compression="gzip" src="${release.output.dir}/${release.prefix}-src.tar.gz" dest="${release.output.dir}/tar-src" />
		<mkdir dir="${release.output.dir}/tar-src/quickfixj/output/ant/testreports" />
		<ant dir="${release.output.dir}/tar-src/quickfixj/core" antfile="build.xml" target="test.unit" />
	</target>

</project>
