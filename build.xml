<project name="quickfix-java" basedir="." default="test">
	<target name="init">
		<property file="build.properties" />
	</target>

	<target name="dist" description="Build the QuickFix/Java distribution">
		<mkdir dir="build/ant" />
		<tar destfile="build/ant/quickfixj.tar">
			<tarfileset dir=".">
				<exclude name="ant/**/*" />
				<exclude name="data/**/*" />
				<exclude name="classes/**/*" />
			</tarfileset>
		</tar>
		<gzip src="ant/quickfixj.tar" destfile="ant/quickfixj.tar.gz" />
		<delete file="ant/quickfixj.tar" />
	</target>

	<target name="jar" description="Build the QuickFix/J JAR file">
		<mkdir dir="build/ant" />
		<jar destfile="build/ant/quickfixj.jar">
			<fileset dir="build/ant/classes/product"/>
		</jar>
	</target>

	<target name="compile"
	        depends="compile.product,compile.tests"
	        description="compile sources and tests" />

	<target name="compile.product" depends="init,generate.code">
		<mkdir dir="build/ant/classes/product" />
		<javac destdir="build/ant/classes/product"
		       debug="on"
		       classpathref="classpath"
		       memoryMaximumSize="128m"
		       fork="yes">
			<src path="src-generated" />
			<src path="src" />
		</javac>
	</target>

	<target name="check.generated.uptodate">
		<!-- This is a bit brute force right now. We could break it out so
			that the update is performed in a more focussed way (specific
			FIX version) -->
		<condition property="generated.uptodate">
			<and>
				<uptodate targetfile="src-generated/quickfix/fix40/Message.java">
					<srcfiles dir="src/quickfix/codegen"
					          includes="FIX40.xml,*.xsl" />
				</uptodate>
				<uptodate targetfile="src-generated/quickfix/fix41/Message.java">
					<srcfiles dir="src/quickfix/codegen"
					          includes="FIX41.xml,*.xsl" />
				</uptodate>
				<uptodate targetfile="src-generated/quickfix/fix42/Message.java">
					<srcfiles dir="src/quickfix/codegen"
					          includes="FIX42.xml,*.xsl" />
				</uptodate>
				<uptodate targetfile="src-generated/quickfix/fix43/Message.java">
					<srcfiles dir="src/quickfix/codegen"
					          includes="FIX43.xml,*.xsl" />
				</uptodate>
				<uptodate targetfile="src-generated/quickfix/fix44/Message.java">
					<srcfiles dir="src/quickfix/codegen"
					          includes="FIX44.xml,*.xsl" />
				</uptodate>
			</and>
		</condition>
	</target>

	<target name="generate.code"
	        unless="generated.uptodate"
	        depends="check.generated.uptodate"
			description="generate FIX message code">
		<mkdir dir="build/ant/classes/product" />
		<javac srcdir="src/quickfix/codegen"
		       includes="JavaCodeGenerator.java,CodeGenerationException.java"
		       destdir="build/ant/classes/product"
		       classpathref="classpath" />
		<java classname="quickfix.codegen.JavaCodeGenerator" fork="yes">
			<arg value="src/quickfix/codegen" />
			<arg value="src-generated" />
			<classpath>
				<pathelement location="cfg" />
				<pathelement location="build/ant/classes/product" />
				<fileset dir=".">
					<include name="lib/*.jar" />
				</fileset>
			</classpath>
		</java>
	</target>

	<target name="compile.tests" depends="compile.product">
		<mkdir dir="build/ant/classes/test" />
		<javac destdir="build/ant/classes/test"
		       debug="on"
		       srcdir="test"
		       classpathref="classpath" />
		<copy file="test/quickfix/FIX44_test.xml"
			      todir="build/ant/classes/test/quickfix" />
	</target>

	<path id="classpath">
		<pathelement location="build/ant/classes/product" />
		<fileset dir=".">
			<include name="lib/*.jar" />
		</fileset>
	</path>

	<!--
	<taskdef name="junit" classname="org.apache.tools.ant.taskdefs.optional.junit.JUnitTask"/>
	-->
	
	<target name="test" description="Run the tests" depends="compile">
		<junit printsummary="true" showoutput="true">
			<formatter type="plain" usefile="false" />
			<classpath>
				<path refid="classpath"/>
				<pathelement location="build/ant/classes/test"/>
			</classpath>
			<batchtest>
				<fileset dir="test">
					<include name="quickfix/Test*e.java" />
					<include name="quickfix/test/DataDictionary.java"/>
					<include name="quickfix/test/FieldTest.java"/>
					<include name="quickfix/test/MessageTest.java"/>
				</fileset>
			</batchtest>
		</junit>
	</target>

	<target name="clean" description="Remove build and distribution files">
		<delete dir="build/ant" />
	</target>

	<!--
	<target name="ordermatcher"
	        description="Run the Order Matcher"
	        depends="compile">
		<java classname="quickfix.examples.ordermatch.Main">
			<arg value="test/quickfix/examples/ordermatch/ordermatch.cfg" />
			<classpath>
				<pathelement location="ant/classes" />
				<fileset dir=".">
					<include name="ant/classes" />
					<include name="lib/*.jar" />
				</fileset>
			</classpath>
		</java>
	</target>

	<target name="banzai" description="Run Banzai" depends="compile">
		<java classname="quickfix.examples.banzai.Banzai" fork="yes">
			<arg value="cfg/banzai.cfg" />
			<classpath>
				<pathelement location="ant/classes" />
				<fileset dir=".">
					<include name="lib/*.jar" />
				</fileset>
			</classpath>
		</java>
	</target>
	-->

	<!-- Emma Coverage Targets -->

	<target name="emma.init">
		<property name="coverage.dir" value="coverage" />
		<path id="emma.lib">
			<fileset dir="." includes="lib/emma*.jar" />
		</path>
		<taskdef resource="emma_ant.properties" classpathref="emma.lib" />
		<taskdef name="junit"
		         classname="org.apache.tools.ant.taskdefs.optional.junit.JUnitTask" />
	</target>

	<target name="emma.all"
	        depends="emma.clean,emma.instrument,emma.test-unit,emma.report" />

	<target name="emma.instrument" depends="emma.init">
		<emma>
			<instr mode="copy"
			       instrpath="classes"
			       outdir="${coverage.dir}/classes"
			       metadatafile="${coverage.dir}/coverage.em"
			       merge="no">
				<filter includes="quickfix.*"
				        excludes="*Test,*Test$*,quickfix.fix*,quickfix.examples*,quickfix.test*" />
			</instr>
		</emma>
	</target>

	<target name="emma.test-unit" depends="emma.init">
		<junit printsummary="true" showoutput="true" fork="yes">
			<jvmarg value="-Demma.coverage.out.file=${coverage.dir}/coverage.ec" />
			<formatter type="plain" usefile="false" />
			<classpath>
				<fileset dir=".">
					<include name="lib/*.jar" />
				</fileset>
				<path refid="emma.lib" />
				<pathelement location="${coverage.dir}/classes" />
				<pathelement location="classes" />
			</classpath>
			<batchtest>
				<fileset dir="test">
					<exclude name="quickfix/Abstract*" />
					<exclude name="quickfix/Api*Test.java" />
					<include name="quickfix/*Test.java" />
				</fileset>
			</batchtest>
		</junit>
	</target>

	<target name="emma.test-acceptance" depends="emma.init">
		<junit printsummary="true" showoutput="true" fork="yes">
			<jvmarg value="-Demma.coverage.out.file=${coverage.dir}/coverage.ec" />
			<formatter type="plain" usefile="false" />
			<classpath>
				<fileset dir=".">
					<include name="lib/*.jar" />
				</fileset>
				<path refid="emma.lib" />
				<pathelement location="${coverage.dir}/classes" />
				<pathelement location="classes" />
			</classpath>
			<test name="quickfix.test.acceptance.AcceptanceTestSuite" />
		</junit>
	</target>

	<target name="emma.report" depends="emma.init">
		<delete dir="${coverage.dir}/_files" />
		<emma>
			<report sourcepath="src">
				<infileset dir="${coverage.dir}" includes="*.em, *.ec" />
				<html outfile="${coverage.dir}" />
			</report>
		</emma>
	</target>

	<target name="emma.clean" depends="emma.init">
		<delete dir="${coverage.dir}" />
	</target>

</project>