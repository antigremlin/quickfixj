<project name="master" basedir="." default="">
	<property name="release.output.dir" value="dist"/>
	<property name="output.dir" value="classes" />
	<!--
	<property name="ant.output.dir" value="output/ant" />
	<property name="eclipse.output.dir" value="${output.dir}/eclipse" />
	<property name="jar.output.dir" value="${ant.output.dir}/jars" />
	<property name="test.classes.dir" value="${ant.output.dir}/classes/test" />
	<property name="test.src.dir" value="test" />
	<property name="example.src.dir" value="examples" />
	<property name="product.classes.dir"
	          value="${ant.output.dir}/classes/product" />
	<property name="product.src.dir" value="core/src/main/java" />
	<property name="product.generated.src.dir"
	          value="${ant.output.dir}/src-generated" />
	<property name="eclipse.generated.src.dir" value="core/target/src-generated" />
	<property name="specs.dir" value="core/src/main/resources" />
	<property name="xsl.dir" value="core/src/main/java/quickfix/codegen" />
	<property name="etc.dir" value="etc" />
	<property name="bin.dir" value="bin" />
	<property name="core.lib.dir" value="core/src/main/lib" />
	<property name="test.lib.dir" value="core/src/test/lib" />
	<property name="optional.lib.dir" value="${core.lib.directory}/optional" />
	<property name="quickfixj.jar" value="quickfixj.jar" />
	<property name="release.output.dir" value="${ant.output.dir}/release" />
	<property name="javadoc.input.dir" value="doc" />
	<property name="usermanual.dir" value="doc/usermanual" />
	<property name="javadoc.output.dir" value="${ant.output.dir}/javadoc" />
	-->

	<macrodef name="iterate">
		<attribute name="target" />
		<element name="properties" optional="true"/>
		<sequential>
			<subant target="@{target}" verbose="true">
				<fileset dir="." includes="*/build.xml" />
				<properties/>
			</subant>
		</sequential>
	</macrodef>

	<target name="jar" description="create module jar files">
		<iterate target="jar"/>
	</target>

	<target name="clean" description="clean files">
		<iterate target="clean"/>
	</target>

	<target name="test" description="run tests">
		<iterate target="test"/>
	</target>

	<path id="core.lib.classpath">
		<fileset id="core.lib.fileset" dir="${core.lib.dir}">
			<include name="*.jar"/>
		</fileset>
	</path>

	<path id="optional.lib.classpath">
		<fileset dir="${optional.lib.dir}">
			<include name="**/*.jar" />
		</fileset>
	</path>

	<path id="test.lib.classpath">
		<fileset dir="${test.lib.dir}">
			<include name="**/*.jar" />
		</fileset>
	</path>

	<path id="compile.classpath">
		<pathelement location="${product.classes.dir}" />
		<pathelement location="${test.classes.dir}" />
		<path refid="core.lib.classpath" />
		<path refid="test.lib.classpath" />
		<path refid="optional.lib.classpath" />
	</path>

	<path id="test.classpath">
		<pathelement location="${jar.output.dir}/${quickfixj.jar}" />
		<pathelement location="${test.classes.dir}" />
		<path refid="core.lib.classpath" />
		<path refid="test.lib.classpath" />
		<path refid="optional.lib.classpath" />
	</path>

	<macrodef name="initdir">
		<attribute name="dir" />
		<sequential>
			<delete dir="@{dir}" failonerror="no" />
			<mkdir dir="@{dir}" />
		</sequential>
	</macrodef>

	<macrodef name="convertUnixLineEndings">
		<element name="files" implicit="true"/>
		<sequential>
			<replaceregexp flags="smg" match="\r$" replace="" byline="false">
				<files/>
			</replaceregexp>
		</sequential>
	</macrodef>

	<macrodef name="convertUnixScripts">
		<attribute name="dir" />
		<sequential>
			<convertUnixLineEndings>
				<fileset dir="@{dir}" includes="**/*.sh" />
			</convertUnixLineEndings>
		</sequential>
	</macrodef>

	<!-- Create release archives -->
	<target name="release.timestamped"
	        description="release files with timestamp for version"
	        depends="create.timestamp.version,release.shared" />

	<target name="create.timestamp.version">
		<tstamp>
			<format property="timestamp" pattern="yyyyMMddHHmmss" />
		</tstamp>
		<property name="release.prefix" value="quickfixj-${timestamp}" />
	</target>

	<target name="release.versioned"
	        description="release files with explicit version"
	        depends="query.version,release.shared" />

	<target name="query.version" unless="release.prefix">
		<input message="Enter version number" addproperty="version" />
		<property name="release.prefix" value="quickfixj-${version}" />
	</target>

	<target name="release.shared">
		<initdir dir="${release.output.dir}" />

		<!-- Source release staging -->
		<property name="release.src.staging.dir"
		          value="${basedir}/${release.output.dir}/staging/source" />
		<mkdir dir="${release.src.staging.dir}" />
		<iterate target="export_sources">
			<properties>
				<property name="release.src.staging.dir" value="${release.src.staging.dir}"/>
			</properties>
		</iterate>
		<convertUnixScripts dir="${release.src.staging.dir}"/>

		<!-- Build source archives -->
		<property name="release.src"
		          value="${release.output.dir}/${release.prefix}-src" />

		<property name="release.src.tar" value="${release.src}.tar" />
		<tar destfile="${release.src.tar}.gz"
		     longfile="gnu"
		     compression="gzip"
		     basedir="${release.src.staging.dir}/.." />

		<property name="release.src.zip" value="${release.src}.zip" />
		<zip destfile="${release.src.zip}"
		     basedir="${release.src.staging.dir}/.." />

		<!-- Binary release staging -->
		<property name="release.bin.staging.dir"
		          value="${basedir}/${release.output.dir}/staging/bin" />

		<mkdir dir="${release.bin.staging.dir}" />
		<iterate target="export_binaries">
			<properties>
				<property name="release.bin.staging.dir" value="${release.src.staging.dir}"/>
			</properties>
		</iterate>

		<copy todir="${release.bin.staging.dir}" flatten="yes">
			<fileset dir=".">
				<include name="**/target/*.jar" />
			</fileset>
			<fileset dir=".">
				<include name="LICENSE" />
				<include name="${etc.dir}/**/*" />
				<exclude name="${etc.dir}/eclipse/**/*" />
				<include name="${bin.dir}/**/*" />
			</fileset>
		</copy>
		<copy todir="${release.bin.staging.dir}/lib">
			<fileset refid="core.lib.fileset" />
		</copy>
		<copy todir="${release.bin.staging.dir}/doc/api">
			<fileset dir="${javadoc.output.dir}" />
		</copy>
		<copy todir="${release.bin.staging.dir}/doc/usermanual">
			<fileset dir="${usermanual.dir}" />
		</copy>

		<convertUnixScripts dir="${release.bin.staging.dir}"/>

		<!-- Create binary releases -->
		<property name="release.bin"
		          value="${release.output.dir}/${release.prefix}-bin" />

		<property name="release.bin.tar" value="${release.bin}.tar" />
		<tar destfile="${release.bin.tar}.gz"
		     longfile="gnu"
		     compression="gzip"
		     basedir="${release.bin.staging.dir}/.." />

		<property name="release.bin.zip" value="${release.bin}.zip" />
		<zip destfile="${release.bin.zip}"
		     basedir="${release.bin.staging.dir}/.." />

	</target>

</project>
